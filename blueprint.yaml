tosca_definitions_version: cloudify_dsl_1_3

description: >
  Deploys JBoss.

imports:
  - http://cloudify.co/spec/cloudify/5.0.0/types.yaml
  - plugin:cloudify-fabric-plugin

inputs:
  infra_blueprint:
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - mc-demo-jboss-openstack
          - mc-demo-jboss-azure-vm
          - mc-demo-jboss-azure-vm-arm
          - mc-demo-jboss-aws-vm

  infra_inputs:
    description: >
      Inputs that will be passed on to the infrastructure blueprint.
    default: {}

node_templates:
  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          id: { get_input: infra_blueprint }
          external_resource: true
        deployment:
          inputs: { get_input: infra_inputs }

  jboss:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/create.sh
            fabric_env: &fabric_env
              host_string: { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, public_ip ]}
              user: { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, ssh_user ]}
              key_filename: { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, private_key_path ]}

        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/configure.sh
            fabric_env: *fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start.sh
            fabric_env: *fabric_env
        stop:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/stop.sh
            fabric_env: *fabric_env
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

outputs:
  admin_url:
    description: Administration console URL
    value: { concat: [ 'http://', { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, public_ip ] }, ':9990/console' ] }
